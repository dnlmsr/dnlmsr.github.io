<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on mosis.xyz</title><link>https://mosis.xyz/blog/</link><description>Recent content in Blog on mosis.xyz</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 12 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://mosis.xyz/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Here's why you should learn Git</title><link>https://mosis.xyz/blog/why-you-should-learn-git/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://mosis.xyz/blog/why-you-should-learn-git/</guid><description>&lt;p>&lt;img src="https://git-scm.com/images/logos/downloads/Git-Logo-2Color.png" alt="Git logo">&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Over the course of my journey in Linux I discovered lots of interesting
tools for production or for everyday tasks. But none of them compared to
what &lt;strong>Git&lt;/strong> gave me, and I'd even go as far as saying that it
completely changed my perspective of working on a PC.&lt;/p>
&lt;p>&lt;strong>Warning&lt;/strong>
This is not a guide on how to use Git, there are tons of good guides out
there, this article is about my point of view on Git.&lt;/p>
&lt;h2 id="example">Example&lt;/h2>
&lt;p>Let's say you're working on a software project, or even a project
which isn't necessarily code based such as a writing or a mechanical or
electrical drawing. You start your project, edit it, refine it and
you're done! And you didn't even need Git for this! Now let's say
something doesn't look right with it: you copy your base file, probably
save it as &lt;code>final_version&lt;/code>, edit it, and you're happy with it. Now
let's iterate this last step 5 times until you get to the
&lt;code>trust_me_most_final_version&lt;/code>. Great! Now you have your project folder
cluttered of final versions, but how does someone else know which is the
right one? Let's take this a step further, you remove something from
your final version and you save it, then you realize that part wasn't
so bad, how are you gonna recover it? Are you going to manage your
projects like this or have a tool which deals with this headache for
you?&lt;/p>
&lt;p>If you wish to keep working like this, you probably won't go far away
without losing versions or data. That's why VCSs (Version Control
Systems) exist, they're there to save hours of headaches trying to look
for that particular change you probably even deleted. There are lots of
VCSs out there like Mercurial, CVS, SVN and others, but the most popular
and well known is &lt;strong>Git&lt;/strong>.&lt;/p>
&lt;h2 id="what-does-git-solve">What does Git solve&lt;/h2>
&lt;p>Git basically takes care of versioning your project for you, without
even noticing. Actually, you have to tell him when to store a new
version of the file, but you surely won't have tons of final versions
in your project directory. I will now list some problems it solves:&lt;/p>
&lt;h3 id="saving-every-version-of-the-file">Saving every version of the file&lt;/h3>
&lt;p>Well, that's basically what Git is intended for.&lt;/p>
&lt;h3 id="showing-a-log-of-the-versions">Showing a log of the versions&lt;/h3>
&lt;p>Git can show you a log of all the versions and who uploaded it.&lt;/p>
&lt;h3 id="showing-the-difference-between-two-versions">Showing the difference between two versions&lt;/h3>
&lt;p>Git can show you what you added and deleted to a file&lt;/p>
&lt;h3 id="manage-multiple-files">Manage multiple files&lt;/h3>
&lt;p>Imagine applying the example before with two different files, I won't
even imagine the mess it would create.&lt;/p>
&lt;h3 id="working-with-other-people">Working with other people&lt;/h3>
&lt;p>You'll probably have to deal with working with other people once in a
while, Git makes it easy to do it, by working around what is called a
centralized repository. As an example:&lt;/p>
&lt;ol>
&lt;li>John edits the projects&lt;/li>
&lt;li>John uploads the changes on the central repository (or &lt;code>origin&lt;/code>)&lt;/li>
&lt;li>Joe pulls the latest changes from &lt;code>origin&lt;/code>&lt;/li>
&lt;li>Joe edits the project&lt;/li>
&lt;li>Joe uploads the changes on &lt;code>origin&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>This method ensures two things:&lt;/p>
&lt;ul>
&lt;li>The central repository is always up to date&lt;/li>
&lt;li>If the central repository stops working both John and Joe still have
the full history of the project without the need of an online
connection&lt;/li>
&lt;/ul>
&lt;p>This is just an example of the simplest workflow you can use. There are
many of them on the internet or you can come up with your own. If you
are working on a relatively big project I usually suggest using the
&lt;a href="https://nvie.com/posts/a-successful-git-branching-model">git-flow&lt;/a>
method by Vincent Driessen.&lt;/p>
&lt;h3 id="branching">Branching&lt;/h3>
&lt;p>Now we're going into the rabbit hole of this tool. Let's say you have
a base version of your project, but you want two different versions of
it: one with a picture of a dog in it and one with a picture of a car.
Well branching comes to the rescue! Just create two branches and create
a new desired version on each branch.&lt;/p>
&lt;p>Branching is a huge topic in Git and requires an entire book just for
what you can do with branches and how to manage them.&lt;/p>
&lt;h3 id="merging">Merging&lt;/h3>
&lt;p>What if your branches diverge too much? Merge them!&lt;/p>
&lt;p>&lt;strong>Warning&lt;/strong>
Merging works best with plain text files, see why in
&lt;a href="#binary-text">Binary vs plain text files&lt;/a>&lt;/p>
&lt;h2 id="why-you-need-git">Why you need Git&lt;/h2>
&lt;p>If you do anything on a computer you need to learn how to use Git, I'd
even go as far as saying that is should be a basic skill everyone needs
to know. It takes few hours to learn the basics and no more than few
days to get used to it, but the outcome is astonishing: no more
versioned files in the project directory, no more fear of losing data
and collaborating is way easier.&lt;/p>
&lt;p>The preferred way of learning Git is through the command line. If
you're not familiar with it, Git also comes with a handy user interface
with all the basic buttons you need. And if you don't like the one that
comes by default, don't worry, there are tons of them out there!&lt;/p>
&lt;p>If you wish to take a ride into the Git world, there is a cool game
called &lt;a href="https://ohmygit.org">Oh my Git&lt;/a>. It covers all the basics in a
funny and entertaining way.&lt;/p>
&lt;h2 id="binary-text">Binary vs plain text files&lt;/h2>
&lt;p>One thing to say, Git works best with plain text files, and that's the
reason why I tried to move away from binary files as much as I could.
You can't merge binary files without breaking something, although not
every file can be used as a plain text file. Don't get me wrong, Git
&lt;strong>does work&lt;/strong> with binary files and I still recommend to do it, as a
fact you can stage them, commit them and checkout new and old revisions,
you just can't get every cool feature that it offers. I could keep
talking about why you should move to plain text files when writing
anything on a computer but I'll keep this for another day.&lt;/p>
&lt;h3 id="files-which-are-plain-text-include">Files which are plain text include:&lt;/h3>
&lt;ul>
&lt;li>&lt;code>txt&lt;/code> files&lt;/li>
&lt;li>Most programming languages source code&lt;/li>
&lt;li>Markdown files&lt;/li>
&lt;li>Org-mode files (the one I'm writing on right now)&lt;/li>
&lt;li>Literally any other file which when opened with notepad and doesn't
produce gibberish.&lt;/li>
&lt;/ul>
&lt;h3 id="files-which-are-not-plain-text-include">Files which are &lt;strong>not&lt;/strong> plain text include:&lt;/h3>
&lt;ul>
&lt;li>PDFs&lt;/li>
&lt;li>Every Microsoft Office document type&lt;/li>
&lt;li>Most closed source programming languages&lt;/li>
&lt;li>Mechanical drawings&lt;/li>
&lt;li>Images&lt;/li>
&lt;li>Videos&lt;/li>
&lt;li>Specific programs files&lt;/li>
&lt;/ul>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>To summarize:&lt;/p>
&lt;ul>
&lt;li>Git offers an opportunity to get rid of all your headaches when
working on a computer.&lt;/li>
&lt;li>You need to learn Git if you want to easily collaborate and share
files.&lt;/li>
&lt;li>It's easy to learn and there is a game called &lt;a href="https://ohmygit.org">Oh my
git&lt;/a> which covers all the basics.&lt;/li>
&lt;li>Binary files won't give you as much flexibility as plain text
files.&lt;/li>
&lt;/ul></description></item></channel></rss>